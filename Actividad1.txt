#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main(int argc, char *argv[]) {
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <integer1> <integer2>\n", argv[0]);
        return 1;
    }

    int num1 = atoi(argv[1]);
    int num2 = atoi(argv[2]);

    if (num1 < 0 || num1 > 100 || num2 < 0 || num2 > 100) {
        fprintf(stderr, "Error: Both numbers must be between 0 and 100.\n");
        return 1;
    }

    int sum = num1 + num2;
    printf("Sum: %d\n", sum);

    for (int i = 0; i < sum; i++) {
        pid_t pid = fork();

        if (pid < 0) {
            perror("fork");
            exit(1);
        } else if (pid == 0) { // Child process
            printf("Child PID: %d, Parent PID: %d, Position: %d\n", getpid(), getppid(), i + 1);

            for (int j = 0; j <= i; j++) {
                pid_t child_pid = fork();

                if (child_pid < 0) {
                    perror("fork");
                    exit(1);
                } else if (child_pid == 0) { // Grandchild process
                    printf("Grandchild PID: %d, Parent PID: %d\n", getpid(), getppid());
                    exit(0);
                } else {
                    wait(NULL); // Parent waits for the grandchild to finish
                }
            }
            exit(0); // Child exits after creating its children
        }
    }

    // Parent waits for all child processes to finish
    while (wait(NULL) > 0);

    return 0;
}